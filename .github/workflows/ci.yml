name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  # Quick checks - Verificaciones rápidas y útiles
  quick-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install linting dependencies
        run: |
          pip install flake8 black isort mypy

      - name: Check code formatting with Black
        id: black_check
        run: |
          echo "Checking code formatting with Black..."
          if black --check --diff .; then
            echo "black_status=passing" >> $GITHUB_OUTPUT
            echo "✅ Code formatting is correct"
          else
            echo "black_status=failing" >> $GITHUB_OUTPUT
            echo "❌ Code formatting issues found"
            echo ""
            echo "To fix, run: black ."
          fi

      - name: Check import sorting with isort
        id: isort_check
        run: |
          echo "Checking import sorting with isort..."
          if isort --check-only --diff .; then
            echo "isort_status=passing" >> $GITHUB_OUTPUT
            echo "✅ Import sorting is correct"
          else
            echo "isort_status=failing" >> $GITHUB_OUTPUT
            echo "❌ Import sorting issues found"
            echo ""
            echo "To fix, run: isort ."
          fi

      - name: Run flake8 linting
        id: flake8
        run: |
          echo "Running flake8 checks..."
          if flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=88; then
            echo "flake8_status=passing" >> $GITHUB_OUTPUT
            echo "✅ Flake8 checks passed"
          else
            echo "flake8_status=failing" >> $GITHUB_OUTPUT
            echo "❌ Flake8 checks failed"
            exit 1
          fi

      - name: Type checking with mypy
        id: mypy_check
        run: |
          echo "Running mypy type checking..."
          if mypy . --ignore-missing-imports --no-strict-optional; then
            echo "mypy_status=passing" >> $GITHUB_OUTPUT
            echo "✅ Type checking passed"
          else
            echo "mypy_status=warning" >> $GITHUB_OUTPUT
            echo "⚠️ Type checking found issues (non-blocking)"
          fi
        continue-on-error: true

      # Crear badges dinámicos (solo en main branch)
      - name: Update code quality badges
        if: github.ref == 'refs/heads/main'
        run: |
          # Create badges directory if it doesn't exist
          mkdir -p .github/badges
          
          # Generate flake8 badge JSON
          FLAKE8_STATUS="${{ steps.flake8.outputs.flake8_status }}"
          if [ "$FLAKE8_STATUS" = "passing" ]; then
            FLAKE8_COLOR="brightgreen"
            FLAKE8_MESSAGE="passing"
          else
            FLAKE8_COLOR="red"
            FLAKE8_MESSAGE="failing"
          fi
          
          cat > .github/badges/flake8.json << EOF
          {
            "schemaVersion": 1,
            "label": "flake8",
            "message": "${FLAKE8_MESSAGE}",
            "color": "${FLAKE8_COLOR}"
          }
          EOF
          
          # Generate black badge JSON
          BLACK_STATUS="${{ steps.black_check.outputs.black_status }}"
          if [ "$BLACK_STATUS" = "passing" ]; then
            BLACK_COLOR="000000"
            BLACK_MESSAGE="formatted"
          else
            BLACK_COLOR="red"
            BLACK_MESSAGE="unformatted"
          fi
          
          cat > .github/badges/black.json << EOF
          {
            "schemaVersion": 1,
            "label": "code style",
            "message": "${BLACK_MESSAGE}",
            "color": "${BLACK_COLOR}"
          }
          EOF
          
          # Generate isort badge JSON
          ISORT_STATUS="${{ steps.isort_check.outputs.isort_status }}"
          if [ "$ISORT_STATUS" = "passing" ]; then
            ISORT_COLOR="ef8336"
            ISORT_MESSAGE="sorted"
          else
            ISORT_COLOR="red"
            ISORT_MESSAGE="unsorted"
          fi
          
          cat > .github/badges/isort.json << EOF
          {
            "schemaVersion": 1,
            "label": "imports",
            "message": "${ISORT_MESSAGE}",
            "color": "${ISORT_COLOR}"
          }
          EOF
          
          echo "Code quality badges updated:"
          echo "- Flake8: ${FLAKE8_STATUS}"
          echo "- Black: ${BLACK_STATUS}"
          echo "- isort: ${ISORT_STATUS}"

      - name: Summary of checks
        run: |
          echo "=== CODE QUALITY SUMMARY ==="
          echo "🎨 Black formatting: ${{ steps.black_check.outputs.black_status }}"
          echo "📦 Import sorting: ${{ steps.isort_check.outputs.isort_status }}"
          echo "🔍 Flake8 linting: ${{ steps.flake8.outputs.flake8_status }}"
          echo "🏷️  Type checking: ${{ steps.mypy_check.outputs.mypy_status }}"
          echo ""
          echo "=== QUICK FIX COMMANDS ==="
          echo "Format code: black ."
          echo "Sort imports: isort ."
          echo "Check types: mypy . --ignore-missing-imports"

  # Notification job for failures (solo en main)
  notify-failure:
    runs-on: ubuntu-latest
    needs: [quick-checks]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify team of main branch failure
        run: |
          echo "::error::Code quality checks failed on main branch"
          echo "Please run the following commands to fix:"
          echo "  black ."
          echo "  isort ."
          echo "  flake8 . --max-line-length=88"