name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  # Quick checks that run fast for immediate feedback
  quick-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install linting dependencies
        run: |
          pip install flake8 black isort mypy

      - name: Check code formatting with Black
        run: black --check --diff . || echo "Code formatting issues found"
        continue-on-error: true

      - name: Check import sorting with isort
        run: isort --check-only --diff . || echo "Import sorting issues found"
        continue-on-error: true

      - name: Run flake8 linting (relaxed rules)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source \
          --statistics --max-line-length=88

      - name: Type checking with mypy (non-blocking)
        run: mypy . || echo "Type checking failed but continuing..."
        continue-on-error: true

  # Full test suite - only runs if quick checks pass
  full-tests:
    runs-on: ubuntu-latest
    needs: quick-checks
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Make scripts executable
        run: chmod +x start-dockers.sh stop-dockers.sh

      - name: Start Docker containers
        run: ./start-dockers.sh

      - name: Wait for container and install test dependencies
        run: |
          # Wait for container to be ready and dependencies installed
          echo "Waiting for container to be ready..."
          timeout=120
          while [ $timeout -gt 0 ]; do
            if docker exec pop-api python -c "import fastapi" 2>/dev/null; then
              echo "Container is ready with dependencies installed"
              break
            fi
            echo "Waiting for dependencies... ($timeout seconds left)"
            sleep 5
            timeout=$((timeout-5))
          done
          
          if [ $timeout -eq 0 ]; then
            echo "Timeout waiting for dependencies"
            echo "=== Container logs ==="
            docker logs pop-api
            echo "=== Container status ==="
            docker ps
            exit 1
          fi
          
          # Install additional test dependencies
          docker exec pop-api pip install --no-cache-dir \
            pytest pytest-cov pytest-asyncio
          
          echo "=== Verifying test dependencies ==="
          docker exec pop-api python -c "import pytest; print('pytest OK')"

      - name: Run tests with coverage
        run: |
          echo "=== Running pytest with coverage ==="
          docker exec pop-api pytest --cov=. --cov-report=xml \
            --cov-report=term --verbose \
            --tb=short --disable-warnings
          
          echo "=== Test execution completed ==="

      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
        continue-on-error: true

      - name: Cleanup containers
        if: always()
        run: ./stop-dockers.sh

  # Notification job for failures
  notify-failure:
    runs-on: ubuntu-latest
    needs: [quick-checks, full-tests]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify team of main branch failure
        run: |
          echo "::warning::Tests failed on main branch - immediate attention needed"
          # You can add Slack/Discord/Email notifications here